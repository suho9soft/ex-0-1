//SPI통신을 하기때문에 내장SPI라이브러리필요
#include <SPI.h>
//설치한 이더넷 라이브러리
#include <Ethernet2.h>

//인터넷공간에서 나의 아두이노의 고유한 식별자
//지금은 별로 필요한 녀석이 아님!
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
//내 장치의 고유한 IP주소
IPAddress ip(172, 30, 1, 121);

//TCP서버의 포트번호가 몇인가?
//modbus tcp의 기본 포트번호
EthernetServer server(502);

//서버가 클라이언트로 일정한 간격으로 보내기위한 타이머 카운터
unsigned long send_t = 0;

//필드변수끼리 메모리를 공유한다
union{
  byte input[2];
  uint16_t output;
}converter;

//코일주소 0~7까지 8개의 주소가 있는 상황이다!
byte coil[] = {26,28,30,32,34,36,38,40,2,3};//어드레스맵
//HIGH == true == 1
//LOW == false == 0
bool coil_state[] = {LOW,LOW,LOW,LOW,LOW,LOW,LOW,LOW};

void setup() {
  //아두이노의 내부 사정을 시리얼모니터에 출력하는 용도
  Serial.begin(9600);

  //아두이노의 GPIO를 모두 출력으로 설정하되
  //릴레이가 로우레벨트리거이기 때문에 HIGH로 초기화한다!
  for(int i = 0;i<sizeof(coil);i++){
    pinMode(coil[i],OUTPUT);
    digitalWrite(coil[i],HIGH);
  }
  
  //Ethernet.init(CS핀번호)
  //상단에 mac주소와 ip주소로 공유기의 IP주소를 발급받는다!
  Ethernet.begin(mac, ip);
  //TCP서버 시작하기!
  server.begin();
  //공유기로부터 발급받은 IP주소를 시리얼모니터에 출력한다!
  //상단에 입력한 IP주소와 다른게 출력된다면 
  //1.중복이 되었거나
  //2.공유기가 발급해줄수없는 대역의 IP주소를 입력했거나
  //3.W5500을 연결을 잘못했거나
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
}


void loop() {
  //서버가 클라이언트의 접속을 기다리는 부분
  EthernetClient client = server.available();

  //만약 대기중인 클라이언트가 없으면 아래 조건문은 거짓이다!
  if (client) {
    Serial.println("새로운 클라이언트 등장!");

    //무한루프를 돌리고 접속한 클라이언트가 접속을 종료하거나
    //혹은 강제로 접속이 끊어진경우 서버로 접속을 종료하고
    //대기열에있는 새로운 클라이언트의 접속을 허용한다
    while(client.connected()){
      //서버와 클라이언트가 접속을 한 상태에서 뭐할래?
      //서버가 1초간격으로 클라이언트에게 특정한 문자열을 전송한다!
      //이제부터는 클라이언트가 request를 보내기전까지는
      //서버는 어떠한 데이터도 클라이언트로 전송할 수 없음!

      //mapping table대로 명령을 수행한다!
      for(int i = 0;i<sizeof(coil);i++){
        digitalWrite(coil[i],!coil_state[i]);
      }
      
      /*
      if(millis() - send_t > 1000){
        send_t = millis();
        //이부분이 1000밀리초마다 한번씩 조건이 걸림!
        String server_msg = "{\"type\":\"server\",\"data1\":10,\"data2\":20}";
        client.println(server_msg);
      }
      */
      //클라이언트가 일정한 간격으로 보낸 데이터를 서버가 수신해서 시리얼모니터에 출력한다!
      if(client.available() > 0){
        //서버는 클라이언트가 보낸 데이터 3바이트를 읽는다
        byte req[12];
        //REQ
        client.readBytes(req,sizeof(req)); //이부분에서 req에 데이터가 대입됨!
        /*
        Serial.print("REQ : ");
        for(int i = 0;i<sizeof(req);i++){
           Serial.print(req[i],HEX);
           Serial.print(", ");
        }
        Serial.println();
        */
        //데이터해석하기!
        //수신받은 데이터를 modbus_tcp구조체에 카피하기

        converter.input[1] = req[0];
        converter.input[0] = req[1];
        uint16_t msg_id = converter.output;
        converter.input[1] = req[2];
        converter.input[0] = req[3];
        uint16_t type = converter.output;
        converter.input[1] = req[4];
        converter.input[0] = req[5];
        uint16_t len = converter.output;
        uint8_t id = req[6];
        uint8_t fc = req[7];
        converter.input[1] = req[8];
        converter.input[0] = req[9];
        uint16_t addr = converter.output;
        converter.input[1] = req[10];
        converter.input[0] = req[11];
        uint16_t cmd = converter.output;
        /*
        Serial.print("메시지번호:");
        Serial.println(msg_id,HEX);
        Serial.print("프로토콜타입:");
        Serial.println(type,HEX);
        Serial.print("데이터길이:");
        Serial.println(len,HEX);
        Serial.print("국번:");
        Serial.println(id,HEX);
        Serial.print("펑션코드:");
        Serial.println(fc,HEX);
        */

        if(fc == 0x01){
          //read coils
          /*
          Serial.print("시작주소:");
          Serial.println(addr,HEX);
          Serial.print("코일갯수:");
          Serial.println(cmd,HEX);
          */
          byte nockanda_coil = 0;
          for(int i = 0;i<sizeof(coil);i++){
            nockanda_coil = nockanda_coil | (coil_state[i]<<i);  
          }
          byte res[] = {req[0],req[1],req[2],req[3],0x00,0x04,id,fc,0x01,nockanda_coil};
          client.write(res,sizeof(res));
        }else if(fc == 0x05){
          //write single coil
          /*
          Serial.print("코일주소:");
          Serial.println(addr,HEX);
          Serial.print("제어명령:");
          Serial.println(cmd,HEX);
          */
          if(cmd == 0xFF00){
            //ON
            //digitalWrite(coil[addr],HIGH);
            coil_state[addr] = HIGH;
          }else{
            //OFF
            //digitalWrite(coil[addr],LOW);
            coil_state[addr] = LOW;
          }
          //응답
          client.write(req,sizeof(req));
        }
        
      }
    }
    //클라이언트가 접속을 종료한부분!
    client.stop();
    Serial.println("클라이언트와 접속이 해제됨!");
  }
}

